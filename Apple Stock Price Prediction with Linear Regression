import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import yfinance as yf
import matplotlib.pyplot as plt

def predict_short_term_stock_price_linear_regression(ticker='AAPL', days_for_prediction=1):
    """
    Predicts short-term stock prices using linear regression, including recent and future prices.

    Args:
        ticker (str): The stock ticker symbol (e.g., 'AAPL' for Apple).
        days_for_prediction (int): The number of future days to predict.
                                   For short-term, this is typically 1 to 5 days.

    Returns:
        tuple: A tuple containing a string with recent and future predicted prices,
               and the historical data (pandas DataFrame).
               Returns None if there is an error during data retrieval.
    """

    print(f"--- Starting Short-Term Stock Price Prediction for {ticker} using Linear Regression ---")

    try:
        # 1. Download Historical Stock Data
        # Get enough historical data to train the model and make predictions
        # For short-term, 1-2 years should be sufficient, but 5 years provides more context.
        print(f"Downloading historical data for {ticker} (last 5 years)...")
        df = yf.download(ticker, period="5y")

        if df.empty:
            print(f"Error: Could not download data for {ticker}. Please check the ticker symbol.")
            return "Error: Could not download data for the given ticker.", None

        # 2. Prepare the Data for Linear Regression
        # We'll use the 'Close' price as the target variable.
        # Features will be the 'Open', 'High', 'Low', 'Volume', and the 'Close' price from previous days.
        # For short-term prediction, we'll predict the 'Close' price `days_for_prediction` days into the future.

        # Create the target variable: 'Future_Close'
        # This will be the 'Close' price shifted upwards by `days_for_prediction`
        df['Future_Close'] = df['Close'].shift(-days_for_prediction)

        # Drop the rows with NaN values (the last `days_for_prediction` rows)
        df.dropna(inplace=True)

        # Define features (X) and target (y)
        # Features include Open, High, Low, Close, Volume
        features = ['Open', 'High', 'Low', 'Close', 'Volume']
        X = np.array(df[features])
        y = np.array(df['Future_Close'])

        print(f"Data prepared: {len(X)} samples for training/testing.")

        # 3. Split the dataset into training and testing sets
        # Use a common split ratio, e.g., 80% for training, 20% for testing.
        # For time series, it's often better to split sequentially to avoid data leakage.
        # However, for simplicity and typical linear regression setup, train_test_split is used here.
        # For strict time-series forecasting, manually split: X_train = X[:-test_size], X_test = X[-test_size:]
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        print(f"Dataset split: Training samples = {len(X_train)}, Testing samples = {len(X_test)}")

        # 4. Train a Linear Regression Classifier
        print("Training Linear Regression model...")
        model = LinearRegression()
        model.fit(X_train, y_train)
        print("Model training complete.")

        # 5. Make Predictions and Evaluate Model Accuracy
        print("Evaluating model performance on test set...")
        y_pred_test = model.predict(X_test)

        mse = mean_squared_error(y_test, y_pred_test)
        rmse = np.sqrt(mse)
        r2 = r2_score(y_test, y_pred_test)

        print(f"Mean Squared Error (MSE): {mse:.2f}")
        print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
        print(f"R-squared (R2): {r2:.2f}")

        # 6. Predict Future Prices
        # Get the last `days_for_prediction` rows from the original dataframe (before dropping NaNs)
        # These are the latest available features to predict the immediate future.
        # Corrected: Use the last rows of the *original* dataframe (before dropping NaNs) for future prediction features
        X_future = np.array(df[features].tail(days_for_prediction))
        future_predictions_array = model.predict(X_future)

        # Create future dates for the predictions
        last_historical_date = df.index[-1]
        future_dates = pd.date_range(start=last_historical_date + pd.Timedelta(days=1), periods=days_for_prediction)
        future_predictions_series = pd.Series(future_predictions_array, index=future_dates, name='Predicted Close Price')

        # Combine recent test predictions and future predictions for output
        recent_predictions_df = pd.DataFrame({
            'Actual Close Price (Test Set)': y_test,
            'Predicted Close Price (Test Set)': y_pred_test
        }, index=df.index[len(X_train):]) # Use original index for plotting

        output_string = "--- Recent Predictions (Test Set) ---\n"
        output_string += recent_predictions_df.tail().to_string() # Display last few test predictions for brevity
        output_string += f"\n\n--- Predicted Close Prices for the next {days_for_prediction} trading day(s) ---\n"
        output_string += future_predictions_series.to_string()


        print(output_string)


        # 7. Visualize the Results
        plt.figure(figsize=(15, 7))

        # Plot historical close prices
        plt.plot(df.index, df['Close'], label='Historical Close Price', color='blue', alpha=0.7)

        # Plot recent predictions from the test set
        plt.plot(recent_predictions_df.index, recent_predictions_df['Predicted Close Price (Test Set)'],
                 label='Predicted Close Price (Test Set)', color='red', linestyle='--', alpha=0.7)


        # Plot future predictions
        plt.plot(future_predictions_series.index, future_predictions_series,
                 label=f'Predicted Next {days_for_prediction} Day(s)', color='green', linestyle='--', marker='o', markersize=5)

        plt.title(f'{ticker} Stock Price Prediction using Linear Regression')
        plt.xlabel('Date')
        plt.ylabel('Close Price (USD)')
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

        return output_string, df # Return the combined output string and historical data

    except Exception as e:
        print(f"An error occurred: {e}")
        return f"An error occurred: {e}", None

# --- Example Usage ---
if __name__ == '__main__':
    # Predict the next 1 trading day for Apple stock
    predicted_prices_output, historical_data = predict_short_term_stock_price_linear_regression(
        ticker='AAPL',
        days_for_prediction=1 # Predict the close price for the very next trading day
    )

    if predicted_prices_output is not None:
        print("\n--- Short-Term Prediction Complete ---")
        print("Please review the predicted prices and plots above.")
        print("Remember that stock price prediction is inherently challenging.")


import gradio as gr

def stock_predictor_interface(ticker):
    """
    Wrapper function for the Gradio interface.
    Calls the prediction function and formats the output for Gradio.
    """
    # Ensure days_for_prediction is set to 1 as it's required by the underlying function,
    # but we will only display the actual close price from the historical data.
    days_for_prediction = 1

    predicted_prices_output, historical_data = predict_short_term_stock_price_linear_regression(
        ticker=ticker,
        days_for_prediction=days_for_prediction
    )

    if historical_data is not None:
        # Get the actual closing price for the last day in the historical data
        actual_close_price = "Could not retrieve actual close price."
        if not historical_data.empty:
            try:
                actual_close_price = historical_data['Close'].iloc[-1]
                actual_close_price = f"{actual_close_price:.2f}" # Format to 2 decimal places
            except Exception as e:
                print(f"Error retrieving actual close price: {e}")
                pass # Keep the "Could not retrieve actual close price." message


        formatted_output_actual = f"Actual Close Price: {actual_close_price}"


        # Return only the actual price and the historical data DataFrame (as a secondary output, or remove if not needed)
        return formatted_output_actual, historical_data
    else:
        # Handle the error case
        return "Error during data retrieval. Please check the ticker symbol and try again.", None

# Create the Gradio interface
interface = gr.Interface(
    fn=stock_predictor_interface,
    inputs=[
        gr.Textbox(label="Stock Ticker Symbol (e.g., AAPL)"),
    ],
    outputs=[
        # Only include the output for the actual closing price
        gr.Textbox(label="Actual Close Price"),
        gr.DataFrame(label="Historical Data Used") # Keep historical data as a secondary output for context
    ],
    title="Stock Price Information",
    description="Enter a stock ticker symbol to display the actual close price for the last trading day and the historical data."
)

# Launch the interface
interface.launch()
