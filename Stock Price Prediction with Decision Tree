import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, TimeSeriesSplit
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

import yfinance as yf

from datetime import datetime

df = yf.download('AAPL',start='2020-01-10',end=datetime.now().strftime('%Y-%m-%d')
)

df.head()

df.tail()

X = df[['High', 'Low', 'Open', 'Volume']] # Example features
y = df['Close']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.tree import DecisionTreeRegressor

model = DecisionTreeRegressor()

model.fit(X_train, y_train)

pred = model.predict(X_test)
pred = pd.DataFrame(pred)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model's performance
mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, predictions)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")

# Visualize actual vs. predicted values
plt.scatter(y_test, predictions)
plt.xlabel("Actual Close Price")
plt.ylabel("Predicted Close Price")
plt.title("Actual vs. Predicted Close Prices (Decision Tree with Technical Indicators)")
plt.grid(True)
plt.show()

z = list(range(1,101))

plt.scatter(range(len(pred)), pred, s=15)
plt.plot(range(len(pred)), pred, label='Predicted Values')  # Changed label
plt.scatter(range(len(y_test)), y_test, s=15)
plt.plot(range(len(y_test)), y_test, label='Actual Values')    # Changed label
plt.xlabel("Training Examples")
plt.ylabel("Stock Price Values")
plt.legend()
plt.show()

accurancy = model.score(X_test,y_test)
print(accurancy)

# Calculate Simple Moving Averages (SMA)
df['SMA_20'] = df['Close'].rolling(window=20).mean()
df['SMA_50'] = df['Close'].rolling(window=50).mean()

# Calculate Relative Strength Index (RSI)
delta = df['Close'].diff()
gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
rs = gain / loss
df['RSI'] = 100 - (100 / (1 + rs))

# Drop rows with NaN values created by the technical indicators
df.dropna(inplace=True)

# Display the first few rows with the new features
display(df.head())

# Redefine features (X) to include technical indicators
X = df[['High', 'Low', 'Open', 'Volume', 'SMA_20', 'SMA_50', 'RSI']]
y = df['Close']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

# Retrain the Decision Tree Regressor model with the new features
model.fit(X_train, y_train)

print("Model training complete with updated features.")

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model's performance
mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, predictions)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")

# Visualize actual vs. predicted values
plt.scatter(y_test, predictions)
plt.xlabel("Actual Close Price")
plt.ylabel("Predicted Close Price")
plt.title("Actual vs. Predicted Close Prices (Decision Tree with Technical Indicators)")
plt.grid(True)
plt.show()

import gradio as gr
def predict_stock_price(ticker):
  """
  Predicts the stock's closing price using the trained Decision Tree Regressor model
  with technical indicators, given a stock ticker.

  Args:
    ticker (str): The stock ticker symbol (e.g., 'AAPL').

  Returns:
    float: The predicted closing price.
  """
  try:
    # Fetch the latest stock data
    stock_data = yf.download(ticker, period='1d', interval='1d')

    if stock_data.empty:
      return "Could not fetch data for the given ticker."

    # Calculate Simple Moving Averages (SMA) - need enough data points
    # Fetch more data if needed to calculate SMAs and RSI
    data_for_indicators = yf.download(ticker, period='60d', interval='1d') # Fetch enough data for indicators

    data_for_indicators['SMA_20'] = data_for_indicators['Close'].rolling(window=20).mean()
    data_for_indicators['SMA_50'] = data_for_indicators['Close'].rolling(window=50).mean()

    # Calculate Relative Strength Index (RSI)
    delta = data_for_indicators['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    data_for_indicators['RSI'] = 100 - (100 / (1 + rs))

    # Get the latest row with calculated indicators
    latest_data = data_for_indicators.dropna().iloc[-1]


    # Create a DataFrame with the input features in the same order as the training data
    input_data = pd.DataFrame([[latest_data['High'], latest_data['Low'], latest_data['Open'], latest_data['Volume'], latest_data['SMA_20'], latest_data['SMA_50'], latest_data['RSI']]],
                            columns=['High', 'Low', 'Open', 'Volume', 'SMA_20', 'SMA_50', 'RSI'])

    prediction = model.predict(input_data)
    return float(prediction[0]) # Return as float for Gradio Number output

  except Exception as e:
    return f"An error occurred: {e}"

# Define the Gradio interface
interface = gr.Interface(
    fn=predict_stock_price, # Your prediction function
    inputs=[
        gr.Textbox(label="Stock Ticker") # Changed input to Textbox for ticker
    ],
    outputs=gr.Number(label="Predicted Close Price"),
    title="Stock Price Predictor (Decision Tree with Technical Indicators)",
    description="Enter the stock ticker symbol to predict the Close price."
)
interface.launch()
